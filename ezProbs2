// ez 1

// Explicit:
//     Create a function "greetings" 
//     takes 2 arguments (array, object)

// Implicit:
//     Array will be names, 
//         Concat array
//         string.prototype.join() to change array into string
//     Object will be level of job title 
//         use dot notation?    

// Algorithm:
//     Take two arguments, 
//         bracket and curly braces?
//         no, just argument name?
//     create let variable join array 
    // use object.values() to pull out array?
    
//     return (`Hello, ${arrVariable}! Nice to have a ${object} ${object} around.`)

// test:
//     Hello, John Q Doe! Nice to have a Master Plumber around.

function greetings(arr, obj) {us
    let name = arr.join(' ');
    let job = Object.values(obj).join(' ');
    return `Hello, ${name}! Nice to have a ${job} around.`
}

    console.log(
        greetings(["John", "Q", "Doe"], { title: "Master", occupation: "Plumber" })
      );
      // logs Hello, John Q Doe! Nice to have a Master Plumber around.

///////////
//ez 5
// Explicit:
//     Write a program
//     ask for two arguments
//     then Prints the results of the following operations
//         addition, subtraction, product, 
//         quotient, remainder and power

// Implicit:
//     Show 6 results
//         Write 6 functions 
//     All userInputs must be integers
//     last function calls on all the functions

// Algorithm
//     readline-sync question
//         2x ask for two userInputs

const readline = require('readline-sync');

let num1 = readline.question("=> Enter the first number: \n");
let num2 = readline.question("=> Enter the second number: \n");

let addition = Number(num1) + Number(num2);
let subtraction = num1 - num2;
let product = num1 * num2;
let quotient = num1 / num2;
let remainder = num1 % num2;
let power = num1 ** num2;

console.log(`==> ${num1} + ${num2} = ${addition}\n
==> ${num1} - ${num2} = ${subtraction}\n
==> ${num1} * ${num2} = ${product}\n
==> ${num1} / ${num2} = ${quotient}\n
==> ${num1} % ${num2} = ${remainder}\n
==> ${num1} ** ${num2} = ${power}\n`)



// Test:
//     ==> Enter the first number:
//     23
//     ==> Enter the second number:
//     17
//     ==> 23 + 17 = 40
//     ==> 23 - 17 = 6
//     ==> 23 * 17 = 391
//     ==> 23 / 17 = 1
//     ==> 23 % 17 = 6
//     ==> 23 ** 17 = 1.4105003956066297e+23

//////
//Ez 6
// Explicit:
//     one function
//     passes the String that is second to last
//     log Boolean

// Implicit:
//     String.split(' ') to turn to Array;
//     measure the array.length - 1
//     return as a string

// Algorith:
//     create function
//     split into Array
//     loop through length
//         .slice.(-2)
//         .map(word => Array.length - (-1) === word)
//     return 

function penultimate(string) {
    string = string.split(' ').slice(-2, -1).toString();
    return string;
}


// test:
console.log(penultimate("last word") === "last"); // logs true
console.log(penultimate("Launch School is great!") === "is"); // logs true

///
//ez7
// Explicit:
//     One function xor
//     two arguments
//     returns true if one of the arguments is truthy, 
//         false otherwise 
//     looking for a boolean result 

// Implicit:
//     if one argument is true, 

// Algorithm:
    
//     return arg1 && arg2 ? true || false?

function xor(arg1, arg2) {
    return ((arg1 && arg2) || arg1 || arg2 ? true : false);
}

// Test:
console.log(xor(5, 0) === true);
console.log(xor(false, true) === true);
console.log(xor(1, 1) === false);
console.log(xor(true, true) === false);

//////
// Explicit:
//     Write a function
//     returns new Array of every even index Element


// Implicit:
//     0 and white spaces === even

// Algorithm:
//     one function
//     array as argument
//     for/if (i % 2 === 0 or i === 0)
//         new array. push(i)


// function oddities(arr) {
//     let result = [];
//     for (let i = 0; i < arr.length; i++) {
//         if ((i % 2 === 0) || (i === 0)) {
//             result.push(arr[i]);
//         }
//     }
//     return result;
// }

let oddities = (arr) => arr.filter( (_, idx) => idx % 2 === 0);

// Test:
console.log(oddities([2, 3, 4, 5, 6])); // logs [2, 4, 6]
console.log(oddities([1, 2, 3, 4, 5, 6])); // logs [1, 3, 5]
console.log(oddities(["abc", "def"])); // logs ['abc']
console.log(oddities([123])); // logs [123]
console.log(oddities([])); // logs []
