// Explicit: 
//     Extend stringToInteger function
        //by creating a second function
//     if the first char is + return positive
//         if -, return negative
//     if there is no sign then return positive
//     do not use any conversion methods

// Implicit:

// algorithm:
    // create new function
    // accepts string argument and arr
    //     0 index has which symbol?
    //     slice 
    // after you split the string, 
    //     keep it separte from map.
    // if '-' is included, slice (1, array.length)
    // to make a number negative use * -1
    // return result

function stringToInteger(arr) {
    let total = [];
    const numObj = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9
    };

    let number = arr.map(num => numObj[num]);

    return total = number.reduce((acc, ele) => (acc * 10) + ele);
};

function stringToSignedInteger(str) {
    let newArr = [];
    switch (str[0]) {
        case "-":
            newArr = str.split('').slice(1);
            return stringToInteger(newArr) * -1;
        case "+":
            newArr = str.split('').slice(1);  
            return stringToInteger(newArr);
        default:
            newArr = str.split('');
            return stringToInteger(newArr);
    }
};

//test:
console.log(stringToSignedInteger("4321") === 4321); // logs true
console.log(stringToSignedInteger("-570") === -570); // logs true
console.log(stringToSignedInteger("+100") === 100); // logs true
