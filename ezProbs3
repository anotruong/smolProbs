//prob 1
// explicit:
//     write a function that takes a string argument
//         returns new string that contains the same string with all 
//             duplicate characters collapsed


// test:
//     duplicates are characters right after the word;
//     empty strings return empty


// Algorithm:
//     input: String;
//     output: String;

//     let result = ''
//     let variable = []
//     let counter = 0
//     split into separte elements 
//     analyze over each Element
//     do while loop?
    // add 2 to each index name 

//         do {
//             if [0] === [1] {
//              result.push([0])
//                 } else {
//             result.push[0]
//                 }
//           } while (counter < Array.length )

//     instead of do/while, what about for/if loop?
//         if the last element in result === str inded, it continues. 
// //             counter =+ 1

    // return result.join(' ')

function crunch(string) {
    let total = [];
    string.split('')
          .forEach(char => {
            if ((char != total.slice(-1)) || (char.length === 0)) 
            total.push(char)
            });
    return total.join('');
}

// console.log(typeof total)
// test:
console.log(crunch('ddaaiillyy ddoouubbllee'));    // "daily double"
console.log(crunch('4444abcabccba'));              // "4abcabcba"
console.log(crunch('ggggggggggggggg'));            // "g"
console.log(crunch('a'));                          // "a"
console.log(crunch(''));                           // ""

//////
//ez 2 Bannerizer 
// Explicit:
//     Write a function that will take a short line of Text
//         and put it in the box. 
//     Box needs to stretch the longer the Text. 

// Implicit:
//     words should stay in one line. 
//     the length of the lines above 
//         should depend on the length of the string
//     the first dash should be empty, so the second dash is what extends. 
    // String.length + 1
//     box should be 5 lines in height 
        // there should be three variables, 
            // 1 for the top two sections, middle and bottom two
        // What if I made eerything into an array with one empty array.

// Algorithm:
// let edges = ['+', '-', '-', '+'];
// let secondary = ['|', ' ', ' ', '|'];
// let textArea = ['|', ' ', ' ', '|'];
// create text box that inserts str into textArea
//     let textBox = textArea.splice(3, 0, userInput)
// Loop through str.length
//     depending how long the length is, insert either '-' or ' ';
// do while?
// remember to join them all in the loop 

/*function logInBox(string) {
    let counter = 0;
    let edges = ['+', '-', '-', '+'];
    let midLine = ['|', ' ', ' ', '|'];
    let textArea = midLine.slice();
    textArea.splice(2, 0, string);

    while (counter < string.length) {
        edges.splice(1, 0, '-');
        midLine.splice(1, 0, ' ');
        counter++
    };
    
    edges = edges.join('');
    midLine = midLine.join('');
    textArea = textArea.join('');

    return`${edges}\n${midLine}\n${textArea}\n${midLine}\n${edges}`;
}*/

//Shorter version
function logInBox(str) {
    let dashes = '-';
    let whiteSpc = ' ';

    console.log(`+-${dashes.repeat(str.length)}-+`)
    console.log(`| ${whiteSpc.repeat(str.length)} |`)
    console.log(`| ${str} |`)
    console.log(`| ${whiteSpc.repeat(str.length)} |`)
    console.log(`+-${dashes.repeat(str.length)}-+`)
}

// Test:
logInBox('To boldly go where no one has gone before.');
logInBox('');
logInBox('Today\'s the day')

// +--------------------------------------------+
// |                                            |
// | To boldly go where no one has gone before. |
// |                                            |
// +--------------------------------------------+
// logInBox('');
// +--+
// |  |
// |  |
// |  |
// +--+

//////
//prob 4? 5?
// Explicit:
//       one function;
//       takes positive integer, 'n' as an argument;
//       logs a right triangle who's sides have 'n' stars. ;


// Implicit:
//       Ignore any negative integers as an argument;
//       The number of stars on the bottom and right side are the same;
//       whitespace ends with an astrick;

// Algorithm:
//       start: integer;
//       while loop 
//             starts increment up and whitespace increment down
//             console.log " ".repeat()
//       return: many astrisck and white spaces 

function triangle(n) {
      let increment = 1;
      let reduction = n - 1;

      while (n > 0) {
            console.log(`${' '.repeat(reduction)}${'*'.repeat(increment)}`);
            increment += 1;
            reduction -= 1;
            n -= 1;
      }
};


// Test:
triangle(5);

//     *
//    **
//   ***
//  ****
// *****

triangle(9);

//         *
//        **
//       ***
//      ****
//     *****
//    ******
//   *******
//  ********
// *********
////
// Grade Book

// Explicit:
//       one function;
//       Determines the mean/average of 3 arguments
//       returns letter grade;

//       90 <= score <= 100: 'A'
//       80 <= score < 90: 'B'
//       70 <= score < 80: 'C'
//       60 <= score < 70: 'D'
//       0 <= score < 60: 'F'

// Implicit:
//       Finding the mean: 
//       arguments plus each other then divide by 3
      

// Algorithm:

function getGrade(a, b, c){
      let score = Math.floor((a + b + c) / 3);

      if (90 <= score){
                  console.log('A');
            } else if (80 <= score) {
                  console.log('B');
            } else if (70 <= score){
                  console.log('C');
            } else if (60 <= score) {
                  console.log('D');
            } else {
                  console.log('F');
            }

}

// Test:
getGrade(95, 90, 93);    // "A"
getGrade(50, 50, 95);    // "D"
////
//Clean up the Words prob 9
// Explicit:
//       One function;
//       return string with all non-alphabetic chracters replaced by spaces;
//       If one or more non-alphabetic character occurs in a row
//             there should still be only one space;

// Implicit:
      //learn regex. 

// Algorithm:
//       start: string;      
      // learn RegExp
            //two hours. 
      // Create a special character variable. 
      // remove all the special characters and replace them with white SVGPathSegClosePath. 
      //       Remember global flag;
//       return: string;

function cleanUp(string) {
      let spChars = /[-!$%^&*()_+|~=`{}\[\]:";'<>?,.\/]/g;
      return string.replace(spChars, " ").replace(/\s+/g, " ");
}

// Test:
console.log(cleanUp("---what's my +*& line?"));    // " what s my line "
////
// What Century is That?

// Explicit:
//       one function;
//       integer (year) input;
//       return string that begins with century number and ends with:
//             'st', 'nd', 'rd', or 'th';
//       New centuries begin in the years that end with 1, so 1901-2000 is the 20th century. 


// Implicit:
//       Ignore non integer characters;
//       Centuries go by the last 100 years;

// Algorithm:
//       start integer;
//       let decade;

//       Find the century;
//             Divide each number by 100;
//             if there is a remainder;
//                   decade = (year / 100) + 1; 
//             else 
//                   decade = year / 100;

//       Attach the ending term:
//             loop over string(decade);
//             if decade.includes((/10-20/)) || (year % 10 === 0));
//             return decade + 'th';
//             else if decade.endsWith('3');
//             return decade+'rd';
//             else if decade.endsWith('1');
//             return decade + 'st';
      // There must be a neater way to appoarch this. 
      //  ends in 3, excludes the 10ths. 
      //  then return 'th'
//       return century;
      //note: it's ok to have multiple functions since each function should only do 1-2 things. 

function century(year) {
      let decade;
      
      if (year % 100 === 0) {
            decade = year / 100;
      } else {
            decade = Math.floor(year/100 + 1);
      }
      
      return String(decade) + honorifics(decade);
};

function honorifics(num) {

      if (exclude(num % 100)){
            return 'th';
      }

      let lastDigit = num % 10;
      switch (lastDigit){
            case 1:
                  return 'st';
            case 2:
                  return 'nd';
            case 3:
                  return 'rd';
            default:
                  return 'th';
      }
};

function exclude(tenEnds) {
      return tenEnds === 11 || tenEnds === 12 || tenEnds === 13;
}

//Test:
console.log(century(2000));        // "20th"
console.log(century(2001));        // "21st"
console.log(century(1965));        // "20th"
console.log(century(256));         // "3rd"
console.log(century(5));           // "1st"
console.log(century(10103));       // "102nd"
console.log(century(1052));        // "11th"
console.log(century(1127));        // "12th"
console.log(century(11201));       // "113th"
